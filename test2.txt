class myclass1 {
  //var dec in upper block testing
 int z;
 
 //constructor declaration testing
 id (int myparam, t[][][] myparam2, t2[] myparam3) {
   //var dec in block testing


    
  //Statement testing
    //name = exp;
      //expression testing
    // name(arglist);
      //arglist testing
    // print(arglist);
      //arglist testing
    //conditional statement
      //conditional statement testing
    // while(expression) statement
      //expression testing
      // statement testing
    // return optionalexpression
      //test just return;
      // expression testing
    //block
      //statement testing
    
      
   
  //arglist testing
  //newexpression testing
  //conditional statement testing
  //name testing

   
//  x = new t();
//   x = new int();
//   x = new int;
//   x = new t;
//   x = new t [2+2][5][][];
//   x = new int[2+2][5][][];
//   x = new word [];
//   x = new int [];
//   x = new argw(2+2);
//   x = new a(2+2,+2,new int[], 4, x == x);
  
}
 id (int myparam1, mytype[][] myparam2) {mytype myvar3; x = 5;}
 void myfunc(){int x;}
 void myfunc(int p1, typ p2){int z;}

}
/********************************expression testing****************************/ 
  //expression testing
    //name
      this
      nameid
      id.type
      this.type.id.id2
      this.type.id.id2[2]
      this.type.id.id2[2+2]
      this.type.id.id2[new int[2+2][5][][]] 
    //number
      5
    //null
      null
    //name(arglist)
      this()
      nameid()
      id.type()
      this.type.id.id2()
      this.type.id.id2[2]()
      this.type.id.id2[2+2]()
      this.type.id.id2[new int[2+2][5][][]]()
    //read
      read()
    //newExpression
//  new t()
//  new int()
//  new int
//  new t
//  new t [2+2][5][][]
//  new int[2+2][5][][]
//  new word []
//  new int []
//  new argw(2+2)
//  new a(2+2,+2,new int[], 4, x == x)
    //unaryop expression
+ this.type.id.id2[new int[2+2][5][][]]
- new a(2+2,+2,new int[], 4, x == x)
! name arglist as an expression

    //expression relationop expression
    //expression sump expression
    // expression productop expression
    //(expression)
 
/**********************************vardec testing******************************/    
//ID testing
mytype myvar1;
mytype[] myvar2;
mytype[][] myvar3;
mytype[][][][][] myvar4;
//int testing
int myvar1;
int[] myvar2;
int[][] myvar3;
int[][][][][] myvar4;
/******************************Name Testing************************************/
this
nameid
id.type
this.type.id.id2
this.type.id.id2[2]
this.type.id.id2[2+2]
this.type.id.id2[new int[2+2][5][][]]
/******************************************************************************/

/******************************ArgList Testing************************************/
//expression testing
//expression , expression testing
