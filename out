

<ClassDec> --> class ID <ClassBody>

<ClassBody> --> {<VarDecRecursive> <ConstructorDecRecursive> <MethodDecRecursive> }
<VarDecRecursive> --> <VarDecRecursive> <VarDec>
<VarDecRecursive> --> <VarDecRecursive> <VarDec>
<VarDecRecursive> --> <VarDec> <VarDec>
<VarDec> --> <Type> z ;
<Type> --> int
<VarDec> --> <Type> z ;
<Type> --> int <RecursiveBrackets>
<RecursiveBrackets> -->  []

<VarDec> --> <Type> myarray ;
<Type> --> mytype <RecursiveBrackets>
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []

<VarDec> --> <Type> myvar ;
<Type> --> mytype

<ConstructorDecRecursive> -->  <ConstructorDec> <ConstructorDec>
<ConstructorDecRecursive> -->  <ConstructorDec> <ConstructorDec>
<ConstructorDec> --> id(<ParamList>) <Block>
<ParamList> -->  <Param> <ParamList>
<Param> -->  <Type> myparam
<Type> --> int
<ParamList> -->  <Param> <ParamList>
<Param> -->  <Type> myparam2
<Type> --> t <RecursiveBrackets>
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []
<ParamList> -->  <Param> 
<Param> -->  <Type> myparam3
<Type> --> t2 <RecursiveBrackets>
<RecursiveBrackets> -->  []
<Block> --> {<Statement>>}
<Statement> --> while (<Expression>) <Statement> 
<Expression> --> (<Expression>)
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> *
<Expression> --> 2


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression> <ArgList>
<Expression> --> <NewExpression>
<NewExpression> --> new t 

<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <
<Expression> --> <Name>
<Name> --> b





<Statement> --> <Block>
<Block> --> {<Statement>>}
<Statement> --> <ConditionalStatement>
<ConditionalStatement> --> if (<Expression>) <Statement>
<Expression> --> <Name>(<ArgList>)
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []


<ArgList> --> <Expression> <ArgList>
<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []



<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> /
<Expression> --> 3


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression>
<Expression> --> <NewExpression>
<NewExpression> --> new int ()



<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <=
<Expression> --> <Name>
<Name> --> d


<ArgList> --> <Expression>
<Expression> --> <Name>
<Name> --> z


<Statement> --> <Block>
<Block> --> {<Statement>Recursive>}
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> -->  <Statement> <Statement>
<Statement> --> print (<ArgList>) ;
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []



<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> /
<Expression> --> 3


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression>
<Expression> --> <NewExpression>
<NewExpression> --> new int ()



<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <=
<Expression> --> <Name>
<Name> --> d


<ArgList> --> <Expression>
<Expression> --> <Name>
<Name> --> z



<Statement> --> <Name> = <Expression> ;
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 2

<SumOp> --> +
<Expression> --> 2


<Expression> --> 5

<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []

<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 2

<SumOp> --> +
<Expression> --> 2


<Expression> --> 5

<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []





<Statement> --> return <Expression> ;
<Expression> --> (<Expression>)
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 12

<ProductOp> --> *
<Expression> --> 25


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> !
<Expression> --> 90


<ArgList> --> <Expression> <ArgList>
<Expression> --> <NewExpression>
<NewExpression> --> new mytype <RecursiveBrackets>
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []

<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 18


<ArgList> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> <Name>
<Name> --> y

<ProductOp> --> &&
<Expression> --> <Name>
<Name> --> x








<Statement> --> return ;



<Statement> --> ;












<ConstructorDec> --> cons2() <Block>
<Block> --> {}


<ConstructorDec> --> cons3() <Block>
<Block> --> {}


<MethodDecRecursive> -->  <MethodDec> <MethodDec>
<MethodDec> --> void myfunc (<ParameterList>)  <Block>
<ParamList> -->  <Param> <ParamList>
<Param> -->  <Type> myparam
<Type> --> int
<ParamList> -->  <Param> <ParamList>
<Param> -->  <Type> myparam2
<Type> --> t <RecursiveBrackets>
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []
<ParamList> -->  <Param> 
<Param> -->  <Type> myparam3
<Type> --> t2 <RecursiveBrackets>
<RecursiveBrackets> -->  []
<Block> --> {<Statement>>}
<Statement> --> while (<Expression>) <Statement> 
<Expression> --> (<Expression>)
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> *
<Expression> --> 2


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression> <ArgList>
<Expression> --> <NewExpression>
<NewExpression> --> new t 

<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <
<Expression> --> <Name>
<Name> --> b





<Statement> --> <Block>
<Block> --> {<Statement>>}
<Statement> --> <ConditionalStatement>
<ConditionalStatement> --> if (<Expression>) <Statement>
<Expression> --> <Name>(<ArgList>)
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []


<ArgList> --> <Expression> <ArgList>
<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []



<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> /
<Expression> --> 3


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression>
<Expression> --> <NewExpression>
<NewExpression> --> new int ()



<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <=
<Expression> --> <Name>
<Name> --> d


<ArgList> --> <Expression>
<Expression> --> <Name>
<Name> --> z


<Statement> --> <Block>
<Block> --> {<Statement>Recursive>}
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> --> <StatementRecursive> <Statement>
<StatementRecursive> -->  <Statement> <Statement>
<Statement> --> print (<ArgList>) ;
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int <[Expression]>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> (<Expression>)
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 6

<SumOp> --> +
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 5




<ProductOp> --> *
<Expression> --> 2



<ProductOp> --> /
<Expression> --> 10


<Expression> --> 5

<Expression> --> <NewExpression>
<NewExpression> --> new t [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression>
<Expression> --> 2

<RecursiveBrackets> -->  []



<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 2

<ProductOp> --> /
<Expression> --> 3


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> +
<Expression> --> 2


<ArgList> --> <Expression>
<Expression> --> <NewExpression>
<NewExpression> --> new int ()



<ArgList> --> <Expression> <ArgList>
<Expression> --> 4

<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <RelationOp> <Expression>
<Expression> --> <Name>
<Name> --> a

<RelationOp> --> <=
<Expression> --> <Name>
<Name> --> d


<ArgList> --> <Expression>
<Expression> --> <Name>
<Name> --> z



<Statement> --> <Name> = <Expression> ;
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 2

<SumOp> --> +
<Expression> --> 2


<Expression> --> 5

<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []

<Expression> --> <Name>
<Name> --> <Name> [<Expression>]
<Name> --> <Name>.id2
<Name> --> <Name>.id
<Name> --> <Name>.type
<Name> --> this
<Expression> --> <NewExpression>
<NewExpression> --> new int [<BracketedExpression>] <RecursiveBrackets>
<BracketedExpression> --> <Expression> [<BracketedExpression>]
<BracketedExpression> --> <Expression>
<Expression> --> <Expression> <SumOp> <Expression>
<Expression> --> 2

<SumOp> --> +
<Expression> --> 2


<Expression> --> 5

<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []





<Statement> --> return <Expression> ;
<Expression> --> (<Expression>)
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> <NewExpression>
<NewExpression> --> new a (<ArgList>)
<ArgList> --> <Expression> <ArgList>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> 12

<ProductOp> --> *
<Expression> --> 25


<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> !
<Expression> --> 90


<ArgList> --> <Expression> <ArgList>
<Expression> --> <NewExpression>
<NewExpression> --> new mytype <RecursiveBrackets>
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> --> <RecursiveBrackets>[]
<RecursiveBrackets> -->  []

<ArgList> --> <Expression> <ArgList>
<Expression> --> <UnaryOp> <Expression>
<UnaryOp> --> -
<Expression> --> 18


<ArgList> --> <Expression>
<Expression> --> <Expression> <ProductOp> <Expression>
<Expression> --> <Name>
<Name> --> y

<ProductOp> --> &&
<Expression> --> <Name>
<Name> --> x








<Statement> --> return ;



<Statement> --> ;












<MethodDec> --> <Type> myfunc2 ()  <Block>
<Type> --> mytype
<Block> --> {}




<ClassDec> --> class ID <ClassBody>

<ClassBody> --> {<ConstructorDecRecursive> <MethodDecRecursive> }
<ConstructorDecRecursive> -->  <ConstructorDec> <ConstructorDec>
<ConstructorDec> --> cons2() <Block>
<Block> --> {}

<ConstructorDec> --> cons3() <Block>
<Block> --> {<VarDec>}
<VarDec> --> <Type> myvar ;
<Type> --> int


<MethodDecRecursive> -->  <MethodDec> <MethodDec>
<MethodDec> --> <Type> myfunc2 ()  <Block>
<Type> --> mytype
<Block> --> {}

<MethodDec> --> <Type> myfunc3 ()  <Block>
<Type> --> mytype
<Block> --> {<VarDec>}
<VarDec> --> <Type> myvar ;
<Type> --> mytype <RecursiveBrackets>
<RecursiveBrackets> -->  []




<ClassDec> --> class ID <ClassBody>

<ClassBody> --> {<MethodDecRecursive> }
<MethodDecRecursive> -->  <MethodDec> <MethodDec>
<MethodDec> --> <Type> myfunc2 ()  <Block>
<Type> --> mytype
<Block> --> {}

<MethodDec> --> <Type> myfunc3 ()  <Block>
<Type> --> mytype
<Block> --> {<VarDec>}
<VarDec> --> <Type> myvar ;
<Type> --> mytype <RecursiveBrackets>
<RecursiveBrackets> -->  []




<ClassDec> --> class ID <ClassBody>

<ClassBody> --> {}


